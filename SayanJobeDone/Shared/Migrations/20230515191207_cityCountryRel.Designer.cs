// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SayanJobeDone.Shared.Data;

#nullable disable

namespace SayanJobeDone.Shared.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230515191207_cityCountryRel")]
    partial class cityCountryRel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This includes tasks such as sweeping, mopping, vacuuming, dusting, and cleaning various areas of the house like bathrooms, kitchens, bedrooms, and living spaces.",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cleaning"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "This involves planning and preparing meals for the family, including shopping for groceries, meal prepping, cooking, and serving food.",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cooking and Meal Preparation"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tasks related to washing, drying, folding, and ironing clothes, bed sheets, towels, and other fabric items.",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Laundry and Ironing"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Taking care of children, including supervising their activities, preparing meals for them, helping with homework, and providing general care and supervision.",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Childcare"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Assisting elderly family members with their daily activities, providing companionship, helping with medication management, and ensuring their well-being",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Elderly Care"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Taking care of the garden, lawn mowing, watering plants, weeding, and general maintenance of outdoor spaces.",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gardening and Outdoor Maintenance"
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Feeding, walking, grooming, and providing care for pets, including cleaning litter boxes or cages.",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pet Care"
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Organizing and decluttering rooms, closets, and storage spaces, as well as managing household paperwork and bills.",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Household Organization"
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basic repairs and maintenance tasks such as changing light bulbs, fixing minor plumbing issues, or repairing furniture.",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Home Maintenance"
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Providing assistance with tasks like running errands, shopping, scheduling appointments, and managing household logistics.",
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personal Assistance"
                        });
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 10,
                            Name = "France"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Lithuania"
                        });
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.EmploymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmploymentStatuses");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.FileInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmploymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OccupationId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("EmploymentStatusId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OccupationId");

                    b.ToTable("FileInformation");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Transgender"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Non-binary"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Genderqueer"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Neutrois"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Bigender"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Gender nonconforming"
                        });
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Bulgarian"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Croatian"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Czech"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Danish"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dutch"
                        },
                        new
                        {
                            Id = 6,
                            Name = "English"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Finnish"
                        },
                        new
                        {
                            Id = 8,
                            Name = "French"
                        },
                        new
                        {
                            Id = 9,
                            Name = "German"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Greek"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Hungarian"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Irish"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Italian"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Latvian"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Lithuanian"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Maltese"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Polish"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Portuguese"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Romanian"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Slovak"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Slovene"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Spanish"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Bulgarian"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Swedish"
                        });
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.LocationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int>("MobilePhoneID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MobilePhoneID");

                    b.ToTable("LocationDatas");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.LoginModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoginModel");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.MobilePhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DeviceModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("MobilePhones");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.PreviousEmployment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FileInformationId")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FileInformationId");

                    b.ToTable("PreviousEmployments");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.RateType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RateTypes");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceProvidersId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceReceiverId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProvidersId");

                    b.HasIndex("ServiceReceiverId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.ServiceProviders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.ServiceReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceReceivers");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.SignUpModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SignUpModel");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("int");

                    b.Property<int?>("FileInformationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FileInformationId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cooking and Meal Preparation"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cleaning and Housekeeping"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Laundry and Ironing"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Organization and Decluttering"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Grocery Shopping and Meal Planning"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Childcare and Babysitting"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Elderly Care and Companionship"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pet Care (feeding, walking, grooming)"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gardening and Yard Maintenance"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Basic Home Repairs and Maintenance"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sewing and Mending"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Home Decorating and Interior Design"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Event Planning and Hosting"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Budgeting and Financial Management"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Time Management and Scheduling"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Communication and Interpersonal Skills"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Problem Solving and Troubleshooting"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "First Aid and CPR"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Driving and Transportation"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Technology Skills (computer use, smartphone usage)"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DIY Projects and Crafts"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Home Security and Safety Awareness"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Personal Care (hairstyling, skincare, grooming)"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fitness and Exercise Training"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Language Skills (teaching, translation)"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Teaching and Tutoring"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "",
                            ExperienceLevel = 1,
                            LastUpdatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Handyman Skills (basic plumbing, electrical, carpentry)"
                        });
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Address", b =>
                {
                    b.HasOne("SayanJobeDone.Shared.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("SayanJobeDone.Shared.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("City");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.City", b =>
                {
                    b.HasOne("SayanJobeDone.Shared.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.FileInformation", b =>
                {
                    b.HasOne("SayanJobeDone.Shared.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SayanJobeDone.Shared.Models.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SayanJobeDone.Shared.Models.EmploymentStatus", "EmploymentStatus")
                        .WithMany()
                        .HasForeignKey("EmploymentStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SayanJobeDone.Shared.Models.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SayanJobeDone.Shared.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SayanJobeDone.Shared.Models.Nationality", "Nationality")
                        .WithMany()
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SayanJobeDone.Shared.Models.Occupation", "Occupation")
                        .WithMany()
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("EducationLevel");

                    b.Navigation("EmploymentStatus");

                    b.Navigation("Gender");

                    b.Navigation("Language");

                    b.Navigation("Nationality");

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.LocationData", b =>
                {
                    b.HasOne("SayanJobeDone.Shared.Models.MobilePhone", "MobilePhone")
                        .WithMany("LocationData")
                        .HasForeignKey("MobilePhoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MobilePhone");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.MobilePhone", b =>
                {
                    b.HasOne("SayanJobeDone.Shared.Models.User", "User")
                        .WithMany("MobilePhones")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.PreviousEmployment", b =>
                {
                    b.HasOne("SayanJobeDone.Shared.Models.FileInformation", null)
                        .WithMany("PreviousEmployments")
                        .HasForeignKey("FileInformationId");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Service", b =>
                {
                    b.HasOne("SayanJobeDone.Shared.Models.ServiceProviders", null)
                        .WithMany("Services")
                        .HasForeignKey("ServiceProvidersId");

                    b.HasOne("SayanJobeDone.Shared.Models.ServiceReceiver", null)
                        .WithMany("ServicesReceived")
                        .HasForeignKey("ServiceReceiverId");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Skill", b =>
                {
                    b.HasOne("SayanJobeDone.Shared.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SayanJobeDone.Shared.Models.FileInformation", null)
                        .WithMany("Skills")
                        .HasForeignKey("FileInformationId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.FileInformation", b =>
                {
                    b.Navigation("PreviousEmployments");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.MobilePhone", b =>
                {
                    b.Navigation("LocationData");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.ServiceProviders", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.ServiceReceiver", b =>
                {
                    b.Navigation("ServicesReceived");
                });

            modelBuilder.Entity("SayanJobeDone.Shared.Models.User", b =>
                {
                    b.Navigation("MobilePhones");
                });
#pragma warning restore 612, 618
        }
    }
}
